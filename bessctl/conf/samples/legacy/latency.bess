import time

# latency will be high, since the queue builds up
# as the Linux network stack is the bottleneck

# v = VPort(loopback=1, rxq_cpu=1)
v = VPort(container_pid=4090,name='test_namespace_eth22',ifname='eth22',ip_addr='192.168.10.22/24',mac_addr='02:00:00:00:00:22')
#v2 = VPort(container_pid=14976,name='test_namespace_eth23',ifname='eth23',ip_addr='192.168.10.23/24',mac_addr='02:00:00:00:00:23')


#add port VPort vp2 container_pid=29510,name='test_namespace_eth22',ifname='eth22',ip_addr='192.168.10.22/24',mac_addr='02:00:00:00:00:22'
#add port VPort vp2 container_pid=6648,name='test_namespace_eth22',ifname='eth22',ip_addr='192.168.10.22/24',mac_addr='02:00:00:00:00:22'
#add port VPort vp2 container_pid=14976,name='test_namespace_eth22',ifname='eth22',ip_addr='192.168.10.22/24',mac_addr='02:00:00:00:00:22'
#add port VPort vp3 container_pid=14976,name='test_namespace_eth23',ifname='eth23',ip_addr='192.168.10.23/24',mac_addr='02:00:00:00:00:23'

Source() -> Timestamp() -> PortOut(port=v)
#Source() -> PortOut(port=v)
PortInc(port=v) -> m::Measure() -> Sink()

last = m.get_summary()

while True:
    bess.resume_all()
    time.sleep(1)
    bess.pause_all()

    now = m.get_summary()
    diff = last - now
    diff /= diff.timestamp
    last = now

    if diff.packets >= 1.0:
        ns_per_packet = diff.total_latency_ns / diff.packets
    else:
        ns_per_packet = 0

    print '%s: %.3f Mpps, %.3f Mbps, %.3f us' % \
            (time.ctime(now.timestamp),
             diff.packets / 1e6,
             diff.bits / 1e6,
             ns_per_packet / 1e3)
