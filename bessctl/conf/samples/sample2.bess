import scapy.all as scapy

pkt_size = int($SN_PKT_SIZE!'60')
assert(60 <= pkt_size <= 1522)

#use scapy to build a packet template
eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
ip = scapy.IP(src='10.0.0.1', dst='10.0.0.2')   # dst IP is overwritten
tcp = scapy.TCP(sport=10001, dport=10002)
payload = ('hello' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)]
pkt = eth/ip/tcp/payload
pkt_data = str(pkt)

myport1::PMDPort(port_id=0, num_inc_q=1, num_out_q=1)
myport2::PMDPort(port_id=1, num_inc_q=1, num_out_q=1)
input1::QueueInc(port=myport1, qid=0) #This module will read from myport on queue 0
output1::QueueOut(port=myport1, qid=0) #This module will write to myport on queue 0
input2::QueueInc(port=myport2, qid=0) #This module will read from myport on queue 0
output2::QueueOut(port=myport2, qid=0) #This module will write to myport on queue 0

input1 -> output2

#FlowGen(template=pkt_data, pps=1000, flow_rate = 10, flow_duration = 5.0, arrival='uniform', duration='uniform', quick_rampup=True, ip_src_range=100000) -> Sink()
